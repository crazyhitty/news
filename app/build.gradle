apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.generateVersionCode()
        versionName "${rootProject.ext.majorVersion}.${getVersionCode()}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            buildConfigField 'String', 'API_KEY', config.apiKey
        }
        release {
            buildConfigField 'String', 'API_KEY', config.apiKey
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the primary support libraries to use the same version.
                if (details.requested.group == rootProject.ext.presentationDependencies.supportLibGroup
                        && details.requested.name != 'multidex'
                        && details.requested.name != 'multidex-instrumentation') {
                    details.useVersion rootProject.ext.supportLibVersion
                }
            }
        }
    }

    testOptions.unitTests {
        returnDefaultValues = true
        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }

        }
    }
}

kapt {
    generateStubs = true
}

project.afterEvaluate {
    project.android.applicationVariants.all { variant ->
        def addConstant = { constantName, constantValue ->
            variant.mergedFlavor.manifestPlaceholders += [(constantName): constantValue]
            buildConfigField "String", "${constantName}", "\"${constantValue}\""
        }
        rootProject.ext.NavigationActions.each {
            action -> addConstant(action, "${rootProject.ext.applicationId}.${action}")
        }
    }
}

dependencies {
    def dep = rootProject.ext.presentationDependencies
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':domain')
    implementation project(':data')
    implementation dep.kotlinStdLib
    implementation dep.appcompat
    implementation dep.supportDesign
    implementation dep.constraintLayout
    implementation dep.dagger
    implementation dep.daggerAndroid
    kapt dep.daggerAndroidProcessor
    kapt dep.daggerCompiler
    implementation dep.rxJava
    implementation dep.rxAndroid
    compileOnly dep.javaxAnnotation
    implementation dep.javaxInject
    testImplementation dep.junit
    testImplementation dep.mockito
    androidTestImplementation dep.testRunner
    androidTestImplementation dep.expressoCore
    implementation dep.kotlinReflect
    implementation dep.rxBinding
    implementation dep.anko
    implementation dep.calligraphy
    implementation dep.fresco
    implementation dep.stetho
    implementation dep.stethoOkhttp
    def dataDep = rootProject.ext.dataDependencies
    implementation dataDep.okHttp
    implementation dataDep.moshi
    implementation dataDep.retrofit
    implementation dataDep.retrofitConverter
    implementation dataDep.retrofitRxJava
    implementation dataDep.retrofitLogging
}
